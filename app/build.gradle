plugins {
    id 'com.android.application'
    id 'kotlin-android'
}
apply from: this.rootProject.file('releaseinfo.gradle')

android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {

        applicationId rootProject.ext.android.applicationId

        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion

        versionCode rootProject.ext.android.apkVerCode
        versionName rootProject.ext.android.apkVerName

        multiDexEnabled rootProject.ext.android.multiDexEnabled //突破应用方法数65535的一个限制
        manifestPlaceholders = rootProject.ext.android.manifestPlaceholders


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //https://developer.android.google.cn/studio/write/lint#overview

    //配置特定的 lint 选项 使用 Lint 优化代码、去除多余资源 ,可以理解为属于优化项
    //lint是代码扫描工具，通过对代码进行静态分析，能够帮助我们识别资源、代码结构存在的问题
    //lint 除了检查 Android 项目源码中潜在的错误，对于代码的正确性、安全性、性能、易用性、便利性和国际化方面也会作出检查
    //
    //从命令行运行 Lint 一般默认开启lint时，是在assemble时候会自动执行lint检查
    // Windows: gradlew lint
    // Mac:./gradlew lint
    //忽略部分没有必要的Lint检查：
    // Java 代码中：忽略 Lint 警告的注解跟 @SuppressWarnings 很类似，@SuppressLint(“忽略的警告名称”)。全部忽略 @SuppressLint("all")
    // XML代码中忽略 Lint：1.xml 中声明 tools 命名空间；2.使用 tools:ignore=”忽略的警告名”；例如： tools:ignore="all"
    lintOptions{

        // If set to true, turns off analysis progress reporting by lint.
        //false 表示开启lint代码扫描检查进度report，true 表示关闭
        quiet false

        // if set to true (default), stops the build if errors are found.
        //true 表示一旦扫描发现error时就终止build task，默认为true，false则相反；
        abortOnError true

        // if true, only report errors.
        //是否忽略waring警告信息，true表示忽略，忽略后只report error级别消息
        ignoreWarnings false

        // true--检查所有问题点，包含其他默认关闭项
        checkAllWarnings true
        // true--所有warning当做error，false 相反
        warningsAsErrors false

        //下面的都没专门使用过


        // 设置为 true 后，release 构建都会以 Fatal 的设置来运行 Lint。
        // 如果构建时发现了致命（Fatal）的问题，会中止构建（具体由 abortOnError 控制）
        checkReleaseBuilds true
        // 不检查指定的问题（根据问题 id 指定）
        disable 'TypographyFractions','TypographyQuotes'
        // 检查指定的问题（根据 id 指定）
        enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
        // 在报告中是否返回对应的 Lint 说明
        explainIssues true
        // 写入报告的路径，默认为构建目录下的 lint-results.html
        htmlOutput file("lint-report.html")
        // 设置为 true 则会生成一个 HTML 格式的报告
        htmlReport true

        // 重新指定 Lint 规则配置文件
        lintConfig file("default-lint.xml")
        // 设置为 true 则错误报告中不包括源代码的行号
        noLines true

        // 覆盖 Lint 规则的严重程度，例如：
        severityOverrides  ["MissingTranslation": LintOptions.SEVERITY_WARNING]
        // 设置为 true 则显示一个问题所在的所有地方，而不会截短列表
        showAll true
        // 配置写入输出结果的位置，格式可以是文件或 stdout
        textOutput 'stdout'
        // 设置为 true，则生成纯文本报告（默认为 false）
        textReport false
        // 设置为 true，则会把所有警告视为错误处理
        warningsAsErrors true
        // 写入检查报告的文件（不指定默认为 lint-results.xml）
        xmlOutput file("lint-report.xml")
        // 设置为 true 则会生成一个 XML 报告
        xmlReport false
        // 将指定问题（根据 id 指定）的严重级别（severity）设置为 Fatal
        fatal 'NewApi', 'InlineApi'
        // 将指定问题（根据 id 指定）的严重级别（severity）设置为 Error
        error 'Wakelock', 'TextViewEdits'
        // 将指定问题（根据 id 指定）的严重级别（severity）设置为 Warning
        warning 'ResourceAsColor'
        // 将指定问题（根据 id 指定）的严重级别（severity）设置为 ignore
        ignore 'TypographyQuotes'


    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    api rootProject.ext.dependencies["corektx"]
    //implementation 'androidx.core:core-ktx:1.3.2'
    api rootProject.ext.dependencies["appcompat"]
    //implementation 'androidx.appcompat:appcompat:1.2.0'
    api rootProject.ext.dependencies["material"]
    //implementation 'com.google.android.material:material:1.2.1'
    api rootProject.ext.dependencies["constraintlayout"]
    //implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    api rootProject.ext.dependencies["livedataktx"]
    //implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    api rootProject.ext.dependencies["lviewmodelktx"]
    //implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
}


// dependencies 的其他变式写法
dependencies.implementation 'junit:junit:4.13.2'
project.dependencies.androidTestImplementation 'androidx.test.ext:junit:1.1.2'
project.dependencies {
    implementation 'androidx.test.espresso:espresso-core:3.3.0'
}